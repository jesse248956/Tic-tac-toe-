#include <pspkernel.h>
#include <pspdisplay.h>
#include <pspdebug.h>
#include <pspctrl.h>
#include <stdio.h>

#define PSP_MAIN_THREAD 0x11

// Game board and current player
int board[3][3]; // 0 = empty, 1 = X, 2 = O
int current_player = 1; // 1 for X, 2 for O

// Function to initialize the board
void init_board() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = 0; // 0 represents an empty spot
        }
    }
}

// Function to check if a player has won
int check_winner() {
    for (int i = 0; i < 3; i++) {
        // Check rows and columns
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != 0) return board[i][0];
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != 0) return board[0][i];
    }

    // Check diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != 0) return board[0][0];
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != 0) return board[0][2];

    return 0; // No winner yet
}

// Function to draw the board on the screen
void draw_board() {
    // Here you would use PSP's graphics library to draw the grid and X/O
    // For simplicity, let's just print the board to the screen:
    printf("\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == 1) printf("X ");
            else if (board[i][j] == 2) printf("O ");
            else printf("- ");
        }
        printf("\n");
    }
}

// Function to handle input from players
void handle_input() {
    SceCtrlData ctrl;
    sceCtrlReadBufferPositive(&ctrl, 1);

    // Example: Handle directional input (left, right, up, down)
    // You can map buttons like Left/Right to move across the board.

    if (ctrl.Buttons & PSP_CTRL_UP) {
        // Logic for moving up or selecting a grid cell
    } else if (ctrl.Buttons & PSP_CTRL_DOWN) {
        // Logic for moving down
    }
}

// Main game loop
int main() {
    sceKernelInitSysLib();

    init_board();

    while (1) {
        draw_board();
        handle_input();

        if (check_winner()) {
            printf("Player %d wins!\n", current_player);
            break; // End the game
        }

        current_player = (current_player == 1) ? 2 : 1; // Switch player
    }

    sceKernelExitGame(); // Exit the game
    return 0;
}
